cameras:
    camera1:
        type: perspective

lights:
    light1:
        type: ambient
        direction: [0, 1, -.5]
        diffuse: [1.000, 1.000, 1.000, 1.00]
        ambient: [1.000, 1.000, 1.000, 1.00]

sources:
    nextzen:
        type: TopoJSON
        url: https://tile.nextzen.org/tilezen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: 3waeKsc0RMiVr4tEkJectg
        max_zoom: 16
scene:
    background:
        color: [0.925, 0.929, 0.973, 1.00]
styles:
    marker-user-location:
        base: points
        draw:
            collide: false
            texture: tex-marker-user-location
    marker-camera:
        base: points
        draw:
            priority: 1
            anchor: top
            collide: false
            texture: tex-marker-camera
            size: [49px, 53px]
    marker-camera-highlight:
        base: points
        draw:
            priority: 1
            anchor: top
            collide: false
            texture: tex-marker-camera-highlight
            size: [49px, 53px]

textures:
    tex-marker-user-location:
        url: images/marker/UserLocation.png
        size: [32px, 32px]
    tex-marker-camera:
        url: images/marker/Camera.png
    tex-marker-camera-highlight:
        url: images/marker/CameraHighlight.png
    tex-marker-red-light-camera:
        url: images/marker/rm_red_light_cam@2x.png

    icons:
        url: images/refill@2x.png
        filtering: mipmap
        density: 5
        sprites:
            # define sprites: [x origin, y origin, width, height]
            arrow: [964, 872, 38, 38]



layers:

    pois:
        data: { source: nextzen }
        filter:
            kind: traffic_signals
        draw:
            points:
                texture: tex-marker-red-light-camera
                size: [35px, 32px]

    boundaries:
        data: { source: nextzen, layer: boundaries }
        # country subdivisions (states, provinces)
        draw:
            lines:
                order: function() { return feature.sort_rank; }
        country:
            filter:
                any:
                    - kind: country
                    - admin_level: 2
            draw:
                country-outerline:
                    style: lines
                    order: function() { return (feature.sort_rank -1); }
                    color: [1.000, 1.000, 1.000, 1.00]
                    width: [[0, 0px], [4, 2px], [8, 5px], [14, 7px], [17, 14m]]
                lines:
                    color: [0.914, 0.902, 0.902, 1.00]
                    width: [[0, 0px], [5, 0px], [6, 1px], [14, 2px]]

    places:
        data: { source: nextzen }
        filter:
            name:en: true
        country:
            filter:
                kind: country
                $zoom: { min: 2, max: 9 }
            draw:
                text:
                    font:
                        family: HelveticaNeue-Bold
                        size: 18px
                        weight: 900
                        fill: black
                        transform: uppercase

    earth:
        data: { source: nextzen }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: [0.925, 0.929, 0.973, 1.00]

    landuse:
        data: { source: nextzen }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: [0.925, 0.929, 0.973, 1.00]

        parks:
            filter:
                all:
                    - $zoom: { min: 3 }
                    - kind: [park, national_park]
            # default for national forests and more?
            draw:
                polygons:
                    color: [0.580, 0.937, 0.620, 1.00]
                    visible: true
    water:
        data: { source: nextzen }
        draw:
            polygons:
                order: function() { return feature.sort_rank; }
                color: [0.627, 0.855, 0.949, 1.00]
    roads:
        data: { source: nextzen }
        filter:
            not: { kind: [path, rail, ferry] }
        draw:
            lines:
                order: function() { return feature.sort_rank; }
                color: [0.600, 0.749, 0.792, 1.00]
                cap: round
                width: [[10, 0px], [12, 1px], [16, 6px], [18, 12m]]
                visible: true
                outline:
                    color: [0.824, 0.835, 0.929, 1.00]
                    width: [[12, 0px], [13, 1px], [15, 1px]]
                    visible: false
            text:
                text_source: name
                font:
                    collide: false
                    priority: 59
                    fill: [[13, [0.250,0.250,0.250]], [17, [0.00,0.00,0.00]]]
                    size: [[5, 10px], [12, 13px]]
                    stroke: { color: [1.00, 1.00, 1.00, 0.85], width: 4px }
        arrows:
            # oneway arrows and shields are distinct groups!
            filter: { oneway: yes, shield_text: false,   $zoom: { min: 17 } }
            draw:
                points:
                    flat: true
                    texture: icons
                    sprite: arrow
                    size: [[13, '11px'], [14, '13px'], [18, '15px']]
                    #placement: spaced
                    placement_spacing: [[17, 50px], [20, 200px]]
                    angle: auto

        highway:
            filter:
                kind: highway
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: [0.616, 0.616, 0.659, 1.00]
                    width: [[5, 1px], [8, 2px], [14, 4.0px], [16, 6.5px], [17, 20m]]
                    outline:
                        color: [0.247, 0.345, 0.788, 1.00]
                        width: [[9, 0.5px], [12, 1px], [16, 2px], [18, 6px]]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [0.529, 0.714, 0.957, 1.00]
                        width: [[9, 1px], [14, 2.5px], [16, 4px], [18, 9m]]
                        cap: butt
                        outline:
                            color: [0.690, 0.298, 0.298, 1.00]
                            width: [[13, 0px], [14, 1px], [18, 1.5px]]
                early_link:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            # except bridges and tunnels, their outlines should also self-sort
                            order: 352
                tunnel-link:
                    filter: {is_tunnel: true, $zoom: {min: 13} }
                    draw:
                        lines:
                            color: [0.796, 0.835, 0.039, 1.00]
                            outline:
                                color: [0.518, 0.725, 0.184, 1.00]

        major_road:
            filter: { kind: major_road }
            # default style
            draw:
                lines:
                    #cap: round
                    #join: round
                    color: [0.545, 0.694, 0.714, 1.00]
                    width: [[13, 0px], [14, 2px], [16, 2.5px], [19, 8m]]
                    outline:
                        color: [0.447, 0.573, 0.710, 1.00]
                        width: [[12, 0px], [13, .5px], [15, 1px]]
                        link:
            filter: { is_link: true } # on- and off-ramps, etc
            draw:
                lines:
                    color: [0.545, 0.694, 0.714, 1.00]
                    width: [[10, 0px], [12, 2px], [16, 4px], [18, 10m]]
                    cap: round
                    visible: true

                    outline:
                        color: [0.902, 0.973, 0.980, 1.00]
                        width: [[10, 1px], [14, 1px], [18, 1.5px]]
                        visible: false


        minor_road:
            filter:
                kind: minor_road
            draw:
                lines:
                    order: function() { return feature.sort_rank; }
                    color: [1.0, 1.0, 1.0, 1.00]
                    width: 8
                    outline:
                        color: [0.686, 0.788, 0.855, 1.00]
                        width: [[14, 0px], [15, 0.5px], [17, 0.75px], [19, 2px]]
        service_road:
            filter: { kind: minor_road, kind_detail: service }
            draw:
                lines:
                    color: [0.545, 0.694, 0.714, 1.00]
                    width: [[13, 0.5px], [17, 3.2px], [18, 7m]]
                    visible: true
                    outline:
                        color: [0.804, 0.757, 0.702, 1.00]
                        width: [[15, 0px], [16, 0px], [19, 2px]]
        #landuse_kind
        service_road2:
            #filter: { kind: minor_road, not: {landuse_kind: [residential, parking, park, grass, sports_centre, scrub] }}
            filter: { kind: minor_road, not: {landuse_kind: [aerodrome] }}

            draw:
                lines:
                    color: [0.627, 0.769, 0.910, 1.00]
                    width: [[13, 0.5px], [17, 3.2px], [18, 7m]]
                    visible: true
                    outline:
                        color: [0.804, 0.757, 0.702, 1.00]
                        width: [[15, 0px], [16, 0px], [19, 2px]]
        path:
            filter:
                all:
                    - kind: [path, portage_way]
                not:
                    - kind_detail: [steps, track, pier]
            draw:
                lines:
                    color: [0.408, 0.584, 0.714, 1.00]
                    width: [[14, 0.5px], [15, 1.5px], [17, 3m]]
                    outline:
                        color: [0.710, 0.149, 0.149, 1.00]
                        width: [[15, 0px], [17, 0px], [18, 1px]]


    buildings:
        data: { source: nextzen, layer: buildings }
        filter:
            not: { location: underground }
        # set default footprint and extrusion draw properties, but don't draw by default (rules below will turn visibility on)
        draw:
            polygons:
                visible: false
                order: 329
                color: [0.792, 0.839, 0.863, 1.00]

        # building footprints, pre-extrusion
        footprints:
            filter:
                # show footprints for buildings at least one zoom level before they will be extruded
                - { $zoom: 13, scale_rank: [1,2] }
                - { $zoom: 14, scale_rank: [1,2,3] }
                - { $zoom: 15, height: { min: 100 } }
                - { $zoom: 15, area: { min: 500 } }
                - { $zoom: 15, volume: { min: 100000 } }
                - { $zoom: 16, area: { min: 100 } }
                - { $zoom: 16, volume: { min: 50000 } }
                - { $zoom: { min: 17 }, area: true }
            draw:
                polygons: { visible: true }
                lines: { visible: false }
    places:
        data: { source: nextzen }
        filter:
            name:en: true
        country:
            filter:
                kind: country
                $zoom: { min: 2, max: 9 }
            draw:
                text:
                    font:
                        family: HelveticaNeue-Bold
                        size: 18px
                        weight: 900
                        fill: [0.000, 0.000, 0.000, 1.00]
                        transform: uppercase
        country:
            filter:
                kind: country
                $zoom: { min: 2, max: 9 }
            draw:
                text:
                    priority: 3
                    font:
                        size: [[5, 18px], [10, 18px]]
                        fill: [0.290, 0.271, 0.271, 1.00]
                        weight: 600
                        stroke: { color: [1.000, 1.000, 1.000, 1.00], width: 4px }

